<?php
/**
 * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures
 * all the essential functionalities required for any enterprise.
 * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com
 *
 * OrangeHRM is free software; you can redistribute it and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program;
 * if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA  02110-1301, USA
 *
 */


// Call authorizeTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "authorizeTest::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once "testConf.php";

$_SESSION['WPATH'] = WPATH;

require_once "authorize.php";
require_once ROOT_PATH."/lib/confs/Conf.php";

/**
 * Test class for authorize.
 * Generated by PHPUnit_Util_Skeleton on 2006-11-02 at 10:06:38.
 */
class authorizeTest extends PHPUnit_Framework_TestCase {

	public $authorizeObj = null;
	public $connection = null;
	public $testSubject = array('employeeId' => "012", 'isAdmin' => "Yes");

	/**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("authorizeTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
    	$this->authorizeObj = new authorize($this->testSubject['employeeId'], $this->testSubject['isAdmin']);

    	$conf = new Conf();

    	$this->connection = mysql_connect($conf->dbhost.":".$conf->dbport, $conf->dbuser, $conf->dbpass);

        mysql_select_db($conf->dbname);

    	mysql_query("INSERT INTO `hs_hr_employee` VALUES ('011', NULL, 'Arnold', 'Subasinghe', '', 'Arnold', 0, NULL, '0000-00-00 00:00:00', NULL, NULL, NULL, '', '', '', '', '0000-00-00', '', NULL, NULL, NULL, NULL, '', '', '', 'AF', '', '', '', '', '', '', NULL, '0000-00-00', '')");
		mysql_query("INSERT INTO `hs_hr_employee` VALUES ('012', NULL, 'Mohanjith', 'Sudirikku', 'Hannadige', 'MOHA', 0, NULL, '0000-00-00 00:00:00', NULL, NULL, NULL, '', '', '', '', '0000-00-00', '', NULL, NULL, NULL, NULL, '', '', '', '', '', NULL, NULL, NULL, NULL, NULL, NULL, '0000-00-00', NULL)");

		mysql_query("INSERT INTO `hs_hr_emp_reportto` VALUES ('012', '011', 1);");

    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    	mysql_query("DELETE FROM `hs_hr_employee` WHERE `emp_number` = '011'", $this->connection);
    	mysql_query("DELETE FROM `hs_hr_employee` WHERE `emp_number` = '012'", $this->connection);

    	mysql_query("DELETE FROM `hs_hr_emp_reportto` WHERE `erep_sup_emp_number` = '012' AND `erep_sub_emp_number` = '011'", $this->connection);
    }

    public function testIsAdmin() {
    	$authObj = new authorize($this->testSubject['employeeId'], 'No');

    	$res = $authObj->isAdmin();

        $this->assertEquals($res, false, "Non admin an Admin");
    }

    public function testIsAdmin2() {
        $res = $this->authorizeObj->isAdmin();

        $this->assertEquals($res, true, "Admin not an Admin");
    }

    public function testIsSupervisor() {
        $authObj = new authorize("041", 'Yes');

    	$res = $authObj->isSupervisor();

        $this->assertEquals($res, false, "non Supervisor an Supervisor");
    }

    public function testIsSupervisor2() {
    	$this->authorizeObj = new authorize($this->testSubject['employeeId'], $this->testSubject['isAdmin']);
        $res = $this->authorizeObj->isSupervisor();

        $this->assertEquals($res, true, "Supervisor not an Supervisor");
    }

    public function testIsESS() {
        $authObj = new authorize("", 'Yes');

    	$res = $authObj->isESS();

        $this->assertEquals($res, false, "ESS not an ESS");
    }

    public function testIsESS2() {
        $res = $this->authorizeObj->isESS();

        $this->assertEquals($res, true, "ESS not an ESS");
    }

    public function testIsTheSupervisor() {
    	$res = $this->authorizeObj->isTheSupervisor("051");

    	$this->assertEquals($res, false, "The supervisor of unknown employee");
    }

    public function testIsTheSupervisor2() {
    	$res = $this->authorizeObj->isTheSupervisor("011");

    	$this->assertEquals($res, true, "The supervisor of unknown emplyee");
    }

    public function testFirstRole() {
    	$authObj = new authorize("041", 'No');
    	$roleArr = array($authObj->roleAdmin, $authObj->roleSupervisor);
        $res = $authObj->firstRole($roleArr);

        $this->assertEquals($res, false, "Didn't return the first");
    }

    public function testFirstRole2() {
    	$authObj = new authorize($this->testSubject['employeeId'], 'No');
    	$roleArr = array($authObj->roleAdmin, $authObj->roleSupervisor);
        $res = $authObj->firstRole($roleArr);

        $this->assertEquals($res, $authObj->roleSupervisor, "Didn't return the first");
    }

    public function testFirstRole3() {
    	$authObj = $this->authorizeObj;
    	$roleArr = array($authObj->roleAdmin, $authObj->roleSupervisor);
        $res = $authObj->firstRole($roleArr);

        $this->assertEquals($res, $roleArr[0], "Didn't return the first");
    }


}

// Call authorizeTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "authorizeTest::main") {
    authorizeTest::main();
}
?>
