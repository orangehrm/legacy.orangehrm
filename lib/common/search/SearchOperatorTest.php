<?php
// Call SearchOperatorTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "SearchOperatorTest::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once 'SearchOperator.php';

/**
 * Test class for SearchOperator.
 * Generated by PHPUnit_Util_Skeleton on 2008-04-03 at 17:13:37.
 */
class SearchOperatorTest extends PHPUnit_Framework_TestCase {
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("SearchOperatorTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    }

    /**
     * Test for getOperator().
     */
    public function testGetOperator() {
            
        // Test each of the available operators
        $op = SearchOperator::getOperator(SearchOperator::OPERATOR_LESSTHAN);
        $this->assertEquals(SearchOperator::OPERATOR_LESSTHAN, $op->getType());
        $this->assertTrue($op->isBinary());
        
        // Get another instance and verify they are the same object instance
        $op2 = SearchOperator::getOperator(SearchOperator::OPERATOR_LESSTHAN);
        $this->assertTrue($op === $op2);
        
        $op = SearchOperator::getOperator(SearchOperator::OPERATOR_GREATERTHAN);
        $this->assertEquals(SearchOperator::OPERATOR_GREATERTHAN, $op->getType());
        $this->assertTrue($op->isBinary());
        
        $op = SearchOperator::getOperator(SearchOperator::OPERATOR_EQUAL);
        $this->assertEquals(SearchOperator::OPERATOR_EQUAL, $op->getType());
        $this->assertTrue($op->isBinary());
        
        $op = SearchOperator::getOperator(SearchOperator::OPERATOR_EQUAL);
        $this->assertEquals(SearchOperator::OPERATOR_EQUAL, $op->getType());
        $this->assertTrue($op->isBinary());

        $op = SearchOperator::getOperator(SearchOperator::OPERATOR_NOT_EQUAL);
        $this->assertEquals(SearchOperator::OPERATOR_NOT_EQUAL, $op->getType());
        $this->assertTrue($op->isBinary());

        $op = SearchOperator::getOperator(SearchOperator::OPERATOR_STARTSWITH);
        $this->assertEquals(SearchOperator::OPERATOR_STARTSWITH, $op->getType());
        $this->assertTrue($op->isBinary());

        $op = SearchOperator::getOperator(SearchOperator::OPERATOR_ENDSWITH);
        $this->assertEquals(SearchOperator::OPERATOR_ENDSWITH, $op->getType());
        $this->assertTrue($op->isBinary());
        
        $op = SearchOperator::getOperator(SearchOperator::OPERATOR_CONTAINS);
        $this->assertEquals(SearchOperator::OPERATOR_CONTAINS, $op->getType());
        $this->assertTrue($op->isBinary());

        $op = SearchOperator::getOperator(SearchOperator::OPERATOR_NOT_CONTAINS);
        $this->assertEquals(SearchOperator::OPERATOR_NOT_CONTAINS, $op->getType());
        $this->assertTrue($op->isBinary());

        $op = SearchOperator::getOperator(SearchOperator::OPERATOR_EMPTY);
        $this->assertEquals(SearchOperator::OPERATOR_EMPTY, $op->getType());
        $this->assertFalse($op->isBinary());

        $op = SearchOperator::getOperator(SearchOperator::OPERATOR_NOT_EMPTY);
        $this->assertEquals(SearchOperator::OPERATOR_NOT_EMPTY, $op->getType());
        $this->assertFalse($op->isBinary());        
    }

}

// Call SearchOperatorTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "SearchOperatorTest::main") {
    SearchOperatorTest::main();
}
?>
